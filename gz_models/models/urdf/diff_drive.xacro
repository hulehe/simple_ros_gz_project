<?xml version="1.0"?>
<robot name="diff_drive" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- External Arguments -->
    <xacro:arg name="robot_model_name" default="diff_drive" />

    <!-- Properties -->
    <xacro:property name="chassis_length" value="2.01142" />
    <xacro:property name="chassis_width" value="1" />
    <xacro:property name="chassis_height" value="0.568726" />
    <xacro:property name="chassis_mass" value="1.14395" />

    <xacro:property name="wheel_radius" value="0.3" />
    <xacro:property name="wheel_length" value="0.2" />
    <xacro:property name="wheel_mass" value="2" />
    <xacro:property name="wheel_y_offset" value="0.625029" />
    <xacro:property name="wheel_x_offset" value="0.554283" />
    <xacro:property name="wheel_z_offset" value="-0.025" />

    <xacro:property name="caster_radius" value="0.2" />
    <xacro:property name="caster_mass" value="1" />
    <xacro:property name="caster_x_offset" value="-0.957138" />
    <xacro:property name="caster_z_offset" value="-0.125" />

    <xacro:property name="lidar_size" value="0.1" />
    <xacro:property name="lidar_mass" value="0.1" />
    <xacro:property name="lidar_z_offset" value="0.33" />

    <!-- Wheel Macro -->
    <xacro:macro name="wheel" params="name side">
        <link name="${name}_wheel">
            <inertial>
                <mass value="${wheel_mass}" />
                <inertia ixx="0.145833" ixy="0" ixz="0" iyy="0.145833" iyz="0" izz="0.125" />
            </inertial>
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <material name="dark_gray">
                    <color rgba="0.2 0.2 0.2 1" />
                </material>
            </visual>
            <collision name="wheel_collision">
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
            </collision>
        </link>

        <joint name="${name}_wheel_joint" type="revolute">
            <parent link="chassis" />
            <child link="${name}_wheel" />
            <origin xyz="${wheel_x_offset} ${side * wheel_y_offset} ${wheel_z_offset}"
                rpy="-1.5707 0 0" />
            <axis xyz="0 0 1" />
            <limit lower="-1.79769e+308" upper="1.79769e+308" effort="1000.0" velocity="50.0" />
        </joint>

        <!-- <gazebo reference="${name}_wheel">
            <sensor name="contact_sensor" type="contact">
                <always_on>true</always_on>
                <update_rate>30.0</update_rate>
                <topic>${name}_wheel_contacts</topic>
                <contact>
                    <collision>wheel_collision</collision>
                </contact>
            </sensor>
        </gazebo> -->
    </xacro:macro>

    <link name="base_link"></link>

    <!-- Chassis -->
    <link name="chassis">
        <inertial>
            <mass value="${chassis_mass}" />
            <inertia ixx="0.126164" ixy="0" ixz="0" iyy="0.416519" iyz="0" izz="0.481014" />
        </inertial>
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}" />
            </geometry>
            <material name="blue">
                <color rgba="0.5 0.5 1.0 1" />
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${chassis_length} ${chassis_width} ${chassis_height}" />
            </geometry>
        </collision>
    </link>

    <joint name="chassis_joint" type="fixed">
        <parent link="base_link" />
        <child link="chassis" />
        <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <!-- Instantiate wheels -->
    <xacro:wheel name="left" side="1" />
    <xacro:wheel name="right" side="-1" />

    <!-- Caster -->
    <link name="caster">
        <inertial>
            <mass value="${caster_mass}" />
            <inertia ixx="0.1" ixy="0" ixz="0" iyy="0.1" iyz="0" izz="0.1" />
        </inertial>
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
            <material name="dark_gray">
                <color rgba="0.2 0.2 0.2 1" />
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
        </collision>
    </link>

    <joint name="caster_wheel" type="fixed">
        <parent link="chassis" />
        <child link="caster" />
        <origin xyz="${caster_x_offset} 0 ${caster_z_offset}" rpy="0 0 0" />
    </joint>

    <!-- Lidar -->
    <link name="lidar_link">
        <inertial>
            <mass value="${lidar_mass}" />
            <inertia ixx="0.000166667" ixy="0" ixz="0" iyy="0.000166667" iyz="0" izz="0.000166667" />
        </inertial>
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${lidar_size} ${lidar_size} ${lidar_size}" />
            </geometry>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${lidar_size} ${lidar_size} ${lidar_size}" />
            </geometry>
        </collision>
    </link>

    <joint name="lidar_joint" type="fixed">
        <parent link="chassis" />
        <child link="lidar_link" />
        <origin xyz="0 0 ${lidar_z_offset}" rpy="0 0 0" />
    </joint>

    <link name="camera_link">
        <inertial>
            <mass value="${lidar_mass}" />
            <inertia ixx="0.000166667" ixy="0" ixz="0" iyy="0.000166667" iyz="0" izz="0.000166667" />
        </inertial>
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${lidar_size} ${lidar_size} ${lidar_size}" />
            </geometry>
            <material name="dark_gray">
                <color rgba="0.2 0.2 0.2 1" />
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${lidar_size} ${lidar_size} ${lidar_size}" />
            </geometry>
        </collision>
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="lidar_link" />
        <child link="camera_link" />
        <origin xyz="0 0 ${lidar_size}" rpy="0 0 0" />
    </joint>

    <!-- Gazebo Plugins -->
    <gazebo>
        <plugin
            filename="gz-sim8-diff-drive-system"
            name="gz::sim::systems::DiffDrive">
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <wheel_separation>1.25</wheel_separation>
            <wheel_radius>${wheel_radius}</wheel_radius>
            <odom_publish_frequency>1</odom_publish_frequency>
            <odom_topic>model/$(arg robot_model_name)/diffdrive_plugin/odom</odom_topic>
            <max_linear_acceleration>1</max_linear_acceleration>
            <min_linear_acceleration>-1</min_linear_acceleration>
            <max_angular_acceleration>2</max_angular_acceleration>
            <min_angular_acceleration>-2</min_angular_acceleration>
            <max_linear_velocity>20</max_linear_velocity>
            <min_linear_velocity>-20</min_linear_velocity>
            <max_angular_velocity>1</max_angular_velocity>
            <min_angular_velocity>-1</min_angular_velocity>
        </plugin>

        <plugin
            filename="gz-sim-joint-state-publisher-system"
            name="gz::sim::systems::JointStatePublisher">
        </plugin>

        <!-- <plugin
            filename="gz-sim-pose-publisher-system"
            name="gz::sim::systems::PosePublisher">
            <publish_link_pose>true</publish_link_pose>
            <use_pose_vector_msg>true</use_pose_vector_msg>
            <static_publisher>true</static_publisher>
            <static_update_frequency>1</static_update_frequency>
        </plugin> -->

        <plugin
            filename="gz-sim-odometry-publisher-system"
            name="gz::sim::systems::OdometryPublisher">
            <odom_frame>$(arg robot_model_name)/odom</odom_frame>
            <robot_base_frame>$(arg robot_model_name)/base_link</robot_base_frame>
            <odom_publish_frequency>20</odom_publish_frequency>
        </plugin>
    </gazebo>


    <!-- Gazebo Sensor for Lidar -->
    <gazebo reference="lidar_link">
        <sensor name="my_lidar" type="gpu_lidar">
            <pose>0 0 0 0 0 0</pose>
            <topic>/model/$(arg robot_model_name)/scan</topic>
            <gz_frame_id>$(arg robot_model_name)/lidar_link</gz_frame_id>
            <update_rate>10</update_rate>
            <lidar>
                <scan>
                    <horizontal>
                        <samples>640</samples>
                        <resolution>1</resolution>
                        <min_angle>-1.396263</min_angle>
                        <max_angle>1.396263</max_angle>
                    </horizontal>
                    <vertical>
                        <samples>1</samples>
                        <resolution>1</resolution>
                        <min_angle>0.0</min_angle>
                        <max_angle>0.0</max_angle>
                    </vertical>
                </scan>
                <range>
                    <min>0.08</min>
                    <max>10.0</max>
                    <resolution>0.01</resolution>
                </range>
            </lidar>
            <always_on>1</always_on>
            <visualize>true</visualize>
        </sensor>
    </gazebo>

    <gazebo reference="camera_link">
        <sensor type="camera" name="top_sensor">
            <camera>
                <horizontal_fov>1.047</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>240</height>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>50</far>
                </clip>
            </camera>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <visualize>true</visualize>
        </sensor>
    </gazebo>

</robot>